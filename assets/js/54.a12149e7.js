(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{236:function(e,a,t){"use strict";t.r(a);var n=t(6),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("原理，使用，优缺点，怎么优化，横向对比竞品，扩展引申相同原理的技术，或者更进一步，有更好的解决方案。")])]),e._v(" "),t("blockquote",[t("p",[e._v("STAR 背景，点出问题，多种解决方法，为什么选这种，结果，还有更好的方法吗")])]),e._v(" "),t("h2",{attrs:{id:"_1-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[e._v("#")]),e._v(" 1. 概念")]),e._v(" "),t("ul",[t("li",[e._v("loader用于对"),t("code",[e._v("模块")]),e._v("的"),t("code",[e._v("源代码")]),e._v("进行"),t("code",[e._v("转换")]),e._v("。")]),e._v(" "),t("li",[e._v("它可以将文件从不同语言（typeScript）转化为JavaScript，或将内联图像转化为 data URL等等。（Data URL：给了我们一种很巧妙的将图片“嵌入”到HTML中的方法。跟传统的用img标记将服务器上的图片引用到页面中的方式不一样，在Data URL协议中，图片被转换成base64编码的字符串形式，并存储在URL中）")])]),e._v(" "),t("p",[e._v("说白了，loader就是一个"),t("code",[e._v("打包的方案")])]),e._v(" "),t("p",[e._v("对于一个特定的文件，webpack如何打包呢？这时loader上场了。")]),e._v(" "),t("p",[t("strong",[e._v("loader 和 plugin 的主要区别")]),e._v("：")]),e._v(" "),t("ul",[t("li",[e._v("loader 用于加载某些资源文件。")])]),e._v(" "),t("p",[e._v("因为 webpack 只能理解 JavaScript 和 JSON 文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， sass，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。从字面意思也能看出，loader是用于加载的，它作用于一个个文件上，将其进行转换。")]),e._v(" "),t("ul",[t("li",[e._v("plugin 用于扩展webpack的功能。")])]),e._v(" "),t("p",[e._v("它直接作用于 webpack，扩展了它的功能。当然loader也是变相的扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域。而plugin的功能更加的丰富，而不仅局限于资源的加载。")]),e._v(" "),t("h2",{attrs:{id:"_2-打包图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-打包图片"}},[e._v("#")]),e._v(" 2. 打包图片")]),e._v(" "),t("p",[t("strong",[e._v("比如我们要打包这块代码：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//在src下的web.js中引入了一张图片\n\n// web.js\nimport Header from './header.js'\nimport Footer from './footer.js'\nconst img = require('./img.jpg')\nHeader()\n\n")])])]),t("p",[t("strong",[e._v("安装file-loader")]),e._v("\n我们以打包图片为例，在webpack中图片（txt、png、gif）打包需要"),t("code",[e._v("file-loader")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install file-loader -D\n")])])]),t("p",[t("strong",[e._v("webpack.config.js里的module对象中配置如下：")])]),e._v(" "),t("ul",[t("li",[e._v("模块打包首先需要给它一个"),t("code",[e._v("规则")]),e._v("，也就是以什么样规则（rules）进行模块打包")]),e._v(" "),t("li",[e._v("在rules中，规则如下："),t("code",[e._v("检查（test）")]),e._v("图片的格式是否以"),t("code",[e._v(".jpg")]),e._v("结尾的，如果是的话，"),t("code",[e._v("使用（use）")]),e._v("file-loader对图片进行打包。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const path = require('path')\nmodule.exports = {\n    entry: './web.js', //入口为上方的web.js文件\n    output: {\n        filename: 'index.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: { // 模块打包\n        rules:[{ // 打包的规则\n            test:/\\.jpg$/, // 打包以jpg结尾的文件\n            use: {\n                loader: 'file-loader'  //使用此loader进行打包\n            }\n        }]\n    }\n}\n\n")])])]),t("p",[t("strong",[e._v("打包结果如下：")]),e._v(" "),t("a",{attrs:{"data-fancybox":"",title:"打包图片",href:"/loader1.png"}},[t("img",{attrs:{src:"/loader1.png",alt:"order"}})])]),e._v(" "),t("p",[e._v("此时，dist目录下,会出现2个文件：")]),e._v(" "),t("ul",[t("li",[e._v("一个是打包之后的图片")]),e._v(" "),t("li",[e._v("一个是打包后的js文件;")]),e._v(" "),t("li",[e._v("webpack打包图片时，它首先会把图片挪到"),t("code",[e._v("dist文件夹下")]),e._v("，其次，还会为图片起一个名字，默认情况下，生成的文件名就是"),t("code",[e._v("文件内")]),e._v("容的"),t("code",[e._v("MD5哈希值")]),e._v("，图片同理。")])]),e._v(" "),t("p",[t("strong",[e._v("options：")])]),e._v(" "),t("blockquote",[t("p",[e._v("options对象是配置文件的名字及输出路径的，"),t("code",[e._v("name参数")]),e._v(" ：为文件配置自定义的文件名模板。"),t("code",[e._v("值为字符串")]),e._v(" ：String")])]),e._v(" "),t("p",[e._v("文件名可进行自定义，name默认值是"),t("code",[e._v("[hash].[ext]")]),e._v(" ， 如果你不想使用默认的哈希文件名，可以在options选项中，配置如下参数：")]),e._v(" "),t("p",[e._v('" [name].[ext] " 意思是文件名字和扩展名与原来文件一样')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const path = require('path')\n \nmodule.exports = {\n    mode: 'development',\n    entry: './src/total.js',\n    output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.jpg$/,\n            use: {\n                loader: 'file-loader',\n                options:{ // 配置选项\n                    name:'[name].[ext]' // 名字和扩展名与原来的文件名一样\n                }\n            }\n        }]\n    }\n}\n")])])]),t("p",[t("strong",[e._v("将一个文件从上下文目录复制到保留完整目录结构的输出目录中去，可使用如下命令：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// ··· ···\nloader: 'file-loader',\noptions: {\n    name: '[path][name].[ext]'\n}\n")])])]),t("p",[e._v("打包结果：")]),e._v(" "),t("p",[e._v("可以看到，打包后的目录结构和原来是一样的，都是放在src中：")]),e._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"打包图片",href:"/loader2.png"}},[t("img",{attrs:{src:"/loader2.png",alt:"order"}})])]),e._v(" "),t("p",[t("strong",[e._v("placeholders 占位符")])]),e._v(" "),t("p",[e._v("上边例子中，"),t("code",[e._v("name后边值叫做占位符")]),e._v("，如："),t("code",[e._v("[path][name].[ext]")]),e._v("，以下是webpack官方文档给出的一些占位符：")]),e._v(" "),t("ul",[t("li",[e._v("[ext]   类型：String；默认值：file.extname; 描述： 资源（文件）的扩展名。")]),e._v(" "),t("li",[e._v("[name]  类型：String ； 默认值： 资源（文件）原始名字；描述：资源的原始名称。")]),e._v(" "),t("li",[e._v("[path]  类型：String；默认值：file.dirname ；描述：资源相对于context的路径。")]),e._v(" "),t("li",[e._v("[hash]  类型：String；默认值：md5； 描述：内容的哈希值")])]),e._v(" "),t("p",[t("strong",[e._v("outputPath")]),e._v("\nuse里面options中的outputPath参数，可以规定"),t("code",[e._v("文件的打包目录")]),e._v("，以上边打包图片为例，把图片打包到 images 文件夹下，可进行如下配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("options:{\n    name: '[name].[ext]',\n    outputPath: 'images/'\n}\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);