(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{260:function(t,e,a){"use strict";a.r(e);var s=a(6),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-直接修改与commit提交mutation修改state的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-直接修改与commit提交mutation修改state的差异"}},[t._v("#")]),t._v(" 1. 直接修改与commit提交mutation修改state的差异")]),t._v(" "),a("ul",[a("li",[t._v("共同点： 能够修改state里的变量，并且是响应式的")]),t._v(" "),a("li",[t._v("不同点：\n若将vue创建 store 的时候传入 "),a("code",[t._v("strict: true")]),t._v(", 开启"),a("code",[t._v("严格模式")]),t._v("，那么任何修改state的操作，只要不经过 mutation的函数都会报错")])]),t._v(" "),a("p",[t._v("一般来说，我们都是通过mutation来修改state的")]),t._v(" "),a("p",[a("strong",[t._v("使用commit提交到mutation修改state的优点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("代码结构更清晰")]),t._v(" "),a("li",[t._v("可以复用代码，提高开发效率")])]),t._v(" "),a("h2",{attrs:{id:"_2-vuex中状态是对象时要注意什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-vuex中状态是对象时要注意什么"}},[t._v("#")]),t._v(" 2. Vuex中状态是对象时要注意什么")]),t._v(" "),a("p",[t._v("因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。")]),t._v(" "),a("h2",{attrs:{id:"_3-组件中批量使用vuex的state状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件中批量使用vuex的state状态"}},[t._v("#")]),t._v(" 3. 组件中批量使用Vuex的state状态")]),t._v(" "),a("p",[t._v("使用mapState辅助函数, 利用对象展开运算符将state混入computed对象中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {mapState} from 'vuex'\nexport default{\n    computed:{\n        ...mapState(['a','b'])\n    }\n}\n")])])]),a("h2",{attrs:{id:"_4-怎么从state派生一些状态出来让多个组件使用它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-怎么从state派生一些状态出来让多个组件使用它"}},[t._v("#")]),t._v(" 4. 怎么从state派生一些状态出来让多个组件使用它")]),t._v(" "),a("ul",[a("li",[t._v("使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。")]),t._v(" "),a("li",[t._v("getter接收两个参数，第一个是"),a("code",[t._v("state")]),t._v("，第二个是"),a("code",[t._v("getters")]),t._v("(可以用来访问其他getter)。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const store = new Vuex.Store({\n    state: {\n        a: 10,\n        b: 10,\n        c: 0.7,\n    },\n    getters: {\n        total: state => {\n            return state.a * state.b\n        },\n        getTotal: (state, getters) => { // 这里的getters当前Vuex中的getters\n            return state.c * getters.total\n        }\n    },\n});\n")])])]),a("p",[t._v("然后在组件中可以用计算属性computed通过this.$store.getters.total这样来访问这些派生转态。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("computed: {\n    total() {\n        return this.$store.getters.total\n    },\n    getTotal() {\n        return this.$store.getters.getTotal\n    }\n}\n")])])]),a("h2",{attrs:{id:"_5-用getter来过滤state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-用getter来过滤state"}},[t._v("#")]),t._v(" 5. 用getter来过滤state")]),t._v(" "),a("p",[t._v("通过让getter返回一个函数，来实现给getter传参。然后通过参数来进行判断从而获取state中满足要求的状态。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const store = new Vuex.Store({\n    state: {\n        todos: [\n            { id: 1, text: '...', done: true },\n            { id: 2, text: '...', done: false }\n        ]\n    },\n    getters: {\n        getTodoById: (state) => (id) =>{\n            return state.todos.find(todo => todo.id === id)\n        }\n    },\n});\n")])])]),a("p",[t._v("然后在组件中可以用计算属性computed通过this.$store.getters.getTodoById(2)这样来访问这些派生转态。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("computed: {\n    getTodoById() {\n        return this.$store.getters.getTodoById\n    },\n}\nmounted(){\n    console.log(this.getTodoById(2)) // { id: 2, text: '...', done: false }\n}\n")])])]),a("h2",{attrs:{id:"_6-组件中批量给getter属性取别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-组件中批量给getter属性取别名"}},[t._v("#")]),t._v(" 6.组件中批量给getter属性取别名")]),t._v(" "),a("p",[t._v("使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {mapGetters} from 'vuex'\nexport default{\n    computed:{\n        ...mapGetters({\n            myTotal:'total', //给getter中的total取别名myTotal\n            myDiscountTotal:'discountTotal',\n        })\n    }\n}\n")])])]),a("h2",{attrs:{id:"_7-怎么改变state的状态。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-怎么改变state的状态。"}},[t._v("#")]),t._v(" 7. 怎么改变state的状态。")]),t._v(" "),a("p",[t._v("参考答案"),a("br"),t._v("\n首先要在mutations中注册一个mutation")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const store = new Vuex.Store({\n    state: {\n        number: 10,\n    },\n    mutations: {\n        SET_NUMBER(state,data){ //data是外界传过来的\n            state.number=data;\n        }\n    },\n});\n")])])]),a("p",[t._v("在组件中使用this.$store.commit提交mutation，改变number")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.$store.commit('SET_NUMBER',10)\n")])])]),a("h2",{attrs:{id:"_8-action和mutation的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-action和mutation的区别"}},[t._v("#")]),t._v(" 8. action和mutation的区别")]),t._v(" "),a("ul",[a("li",[t._v("action 提交的是 mutation，而"),a("code",[t._v("不是直接变更状态")]),t._v("。mutation可以直接变更状态。")]),t._v(" "),a("li",[a("code",[t._v("action")]),t._v(" 可以包含任意"),a("code",[t._v("异步")]),t._v("操作。"),a("code",[t._v("mutation")]),t._v("只能是"),a("code",[t._v("同步")]),t._v("操作。")]),t._v(" "),a("li",[t._v("提交方式不同，action 是用this.$store."),a("code",[t._v("dispatch")]),t._v("('ACTION_NAME',data)来提交。mutation是用this.$store."),a("code",[t._v("commit")]),t._v("('SET_NUMBER',10)来提交。")]),t._v(" "),a("li",[t._v("接收参数不同，mutation第一个参数是"),a("code",[t._v("state")]),t._v("，而action第一个参数是"),a("code",[t._v("context")]),t._v("，其包含了")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n    state,      // 等同于 `store.state`，若在模块中则为局部状态\n    rootState,  // 等同于 `store.state`，只存在于模块中\n    commit,     // 等同于 `store.commit`\n    dispatch,   // 等同于 `store.dispatch`\n    getters,    // 等同于 `store.getters`\n    rootGetters // 等同于 `store.getters`，只存在于模块中\n}\n")])])]),a("h2",{attrs:{id:"_9-如何知道异步的action何时结束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何知道异步的action何时结束"}},[t._v("#")]),t._v(" 9. 如何知道异步的action何时结束")]),t._v(" "),a("p",[t._v("在action函数中返回Promise，然后再提交时候用then处理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("actions:{\n    SETA({commit},data){\n        return new Promise((resolve,reject) =>{\n            setTimeout(() =>{\n                commit('SET_NUMBER',10);\n                resolve();\n            },2000)\n        })\n    }\n}\nthis.$store.dispatch('SETA').then(() => {\n  // ...action SETA 执行完后就会执行这里\n})\n")])])]),a("h2",{attrs:{id:"_10-vuex中有两个action-分别是actiona和actionb-其内都是异步操作-在actionb里面要提交actiona-需在actiona处理结束再执行actionb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-vuex中有两个action-分别是actiona和actionb-其内都是异步操作-在actionb里面要提交actiona-需在actiona处理结束再执行actionb"}},[t._v("#")]),t._v(" 10. Vuex中有两个action，分别是actionA和actionB，其内都是异步操作，在actionB里面要提交actionA，需在actionA处理结束再执行actionB？")]),t._v(" "),a("p",[t._v("利用ES6的async和await来实现。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("actions:{\n    async actionA({commit}){\n        //...\n    },\n    async actionB({dispatch}){\n        await dispatch ('actionA')//等待actionA完成\n        // ... \n    }\n}\n")])])]),a("h2",{attrs:{id:"_11-vuex模块的简单使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-vuex模块的简单使用"}},[t._v("#")]),t._v(" 11. Vuex模块的简单使用")]),t._v(" "),a("p",[a("strong",[t._v("为什么要用模块化呢？")])]),t._v(" "),a("p",[t._v("因为使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。")]),t._v(" "),a("p",[t._v("所以将 store 分割成模块（module）。每个模块拥有自己的 state、mutations、actions、getters，甚至是嵌套子模块，从上至下进行同样方式的分割。")]),t._v(" "),a("p",[a("strong",[t._v("在module文件新建moduleA.js和moduleB.js文件。在文件中写入")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const state={\n    //...\n}\nconst getters={\n    //...\n}\nconst mutations={\n    //...\n}\nconst actions={\n    //...\n}\nexport default{\n    state,\n    getters,\n    mutations,\n    actions\n}\n")])])]),a("p",[a("strong",[t._v("然后再index.js引入模块")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nimport moduleA from './module/moduleA'\nimport moduleB from './module/moduleB'\nconst store = new Vuex.Store({\n    modules:{\n        moduleA,\n        moduleB\n    }\n})\nexport default store\n")])])]),a("h2",{attrs:{id:"_12-模块中getter和mutation接收的第一个参数state-是全局的还是模块的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-模块中getter和mutation接收的第一个参数state-是全局的还是模块的"}},[t._v("#")]),t._v(" 12. 模块中getter和mutation接收的第一个参数state，是全局的还是模块的？")]),t._v(" "),a("p",[t._v("第一个参数state是模块的state，也就是局部的state。")]),t._v(" "),a("h2",{attrs:{id:"_13-在模块中怎么访问全局的state和getter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-在模块中怎么访问全局的state和getter"}},[t._v("#")]),t._v(" 13. 在模块中怎么访问全局的state和getter")]),t._v(" "),a("ul",[a("li",[t._v("在"),a("code",[t._v("getter")]),t._v("中可以通过第三个参数"),a("code",[t._v("rootState")]),t._v("访问到全局的state,可以通过第四个参数"),a("code",[t._v("rootGetters")]),t._v("访问到全局的getter。")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("mutation")]),t._v("中"),a("code",[t._v("不可以")]),t._v("访问全局的satat和getter，只能访问到"),a("code",[t._v("局部的state")]),t._v("。")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("action")]),t._v("中第一个参数context中的"),a("code",[t._v("context.rootState")]),t._v("访问到全局的state，"),a("code",[t._v("context.rootGetters")]),t._v("访问到全局的getter。")])]),t._v(" "),a("h2",{attrs:{id:"_14-组件中如何使用各个属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-组件中如何使用各个属性"}},[t._v("#")]),t._v(" 14. 组件中如何使用各个属性")]),t._v(" "),a("ul",[a("li",[t._v("直接通过"),a("code",[t._v("this.$store.getters")]),t._v("和"),a("code",[t._v("this.$store.state")]),t._v("来访问模块中的getter和state。")]),t._v(" "),a("li",[t._v("直接通过"),a("code",[t._v("this.$store.commit('mutationA',data)")]),t._v("提交模块中的mutation。")]),t._v(" "),a("li",[t._v("直接通过"),a("code",[t._v("this.$store.dispatch('actionA,data')")]),t._v("提交模块中的action。")])]),t._v(" "),a("h2",{attrs:{id:"_15-带命名空间模块内提交全局mutation和action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-带命名空间模块内提交全局mutation和action"}},[t._v("#")]),t._v(" 15.带命名空间模块内提交全局mutation和action")]),t._v(" "),a("p",[t._v("将 "),a("code",[t._v("{ root: true }")]),t._v(" 作为"),a("code",[t._v("第三参数")]),t._v("传给 dispatch 或 commit 即可。")]),t._v(" "),a("ul",[a("li",[t._v("this.$store.dispatch('actionA', null, "),a("code",[t._v("{ root: true }")]),t._v(")")]),t._v(" "),a("li",[t._v("this.$store.commit('mutationA', null, "),a("code",[t._v("{ root: true }")]),t._v(")")])]),t._v(" "),a("h2",{attrs:{id:"_16-命名空间的模块内注册全局action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-命名空间的模块内注册全局action"}},[t._v("#")]),t._v(" 16.命名空间的模块内注册全局action")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("actions: {\n    actionA: {\n        root: true,\n        handler (context, data) { ... }\n    }\n  }\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);