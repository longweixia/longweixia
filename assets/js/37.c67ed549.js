(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{219:function(e,a,r){"use strict";r.r(a);var t=r(6),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("blockquote",[r("p",[e._v("背景，原理，使用场景-用途，如何使用，优缺点，怎么优化，横向对比竞品，扩展引申相同原理的技术，或者更进一步，有更好的解决方案。")])]),e._v(" "),r("blockquote",[r("p",[e._v("STAR 点出问题，多种解决方法，为什么选这种，结果，还有更好的方法吗")])]),e._v(" "),r("h2",{attrs:{id:"_1-数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组"}},[e._v("#")]),e._v(" 1. 数组")]),e._v(" "),r("blockquote",[r("p",[e._v("数组对象的作用是：使用单独的变量名来存储一系列的值。")])]),e._v(" "),r("h3",{attrs:{id:"_1-1-concat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-concat"}},[e._v("#")]),e._v(" 1-1. concat()")]),e._v(" "),r("blockquote",[r("p",[e._v("连接两个或更多的数组，并返回结果。将()里面的元素,拼接到()前的数组中")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var a = [1,2]\nvar b = [3,4]\nvar c = a.concat(b)  //[1,2,3,4]\n\n")])])]),r("h3",{attrs:{id:"_1-2-every"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-every"}},[e._v("#")]),e._v(" 1-2.  every()")]),e._v(" "),r("blockquote",[r("p",[e._v("使用指定函数检测数组中的所有元素")])]),e._v(" "),r("ul",[r("li",[e._v("如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。")]),e._v(" "),r("li",[e._v("如果所有元素都满足条件，则返回 true。")])]),e._v(" "),r("p",[r("strong",[e._v("注意：")]),e._v(" every() 不会对空数组进行检测。")]),e._v(" "),r("p",[r("strong",[e._v("注意：")]),e._v(" every() 不会改变原始数组。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var ages = [1, 2, 4];\nfunction checkAdult(age) {\n    return age >= 2;\n}\nages.every(checkAdult);  //false   不会影响原始数组\n\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var ages = [];\nfunction checkAdult(age) {\n    return age >= 2;\n}\nages.every(checkAdult);  //空数组不检查，直接返回true\n")])])]),r("h3",{attrs:{id:"_1-3-filter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-filter"}},[e._v("#")]),e._v(" 1-3.filter()")]),e._v(" "),r("blockquote",[r("p",[e._v("返回满足"),r("code",[e._v("断言函数")]),e._v("的元素"),r("code",[e._v("组成")]),e._v("的"),r("code",[e._v("数组")]),e._v("。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var ages = [1, 2, 3, 4];\n \nfunction checkAdult(age) {\n    return age >= 3;\n}\nages.filter(checkAdult);  // [3, 4]  不会影响原始数组\n")])])]),r("h3",{attrs:{id:"_1-4-foreach"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-foreach"}},[e._v("#")]),e._v(" 1-4. forEach()")]),e._v(" "),r("blockquote",[r("p",[e._v("为数组的每一个元素调用指定函数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var arr = [1,2,3,4];\nvar sum =0;\narr.forEach((value,index,array) => {\n\n array[index] == value; //true\n\n sum+=value; \n\n });\n\nconsole.log(sum); //结果为 10\n")])])]),r("p"),e._v(" "),r("h3",{attrs:{id:"_1-5-indexof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-indexof"}},[e._v("#")]),e._v(" 1-5. indexOf()")]),e._v(" "),r("blockquote",[r("p",[e._v("在数组中查找指定元素的下标")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nvar a = fruits.indexOf("Apple");  // 2\nvar b = fruits.indexOf("nangua");  // -1\n\n')])])]),r("h3",{attrs:{id:"_1-6-join"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-join"}},[e._v("#")]),e._v(" 1-6. join()")]),e._v(" "),r("blockquote",[r("p",[e._v("把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('var str = ["a", "b", "c", "d"];\nvar str1 = str.join();  // "a,b,c,d"  值为空会保留逗号\nvar str2 = str.join(\'e\');  // "aebeced"  通过e来隔开\nvar str3 = str.join(\'1\');  // "a1b1c1d"  通过1来隔开\n')])])]),r("h3",{attrs:{id:"_1-7-lastindexof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-lastindexof"}},[e._v("#")]),e._v(" 1-7. lastIndexOf()")]),e._v(" "),r("blockquote",[r("p",[e._v("1.如果没有指定参数返回一个指定的字符串值"),r("code",[e._v("最后出现")]),e._v("的位置（下标，空格也算一个位置）。2.如果指定"),r("code",[e._v("第二")]),e._v("个参数 "),r("code",[e._v("start")]),e._v("，则在一个字符串中的"),r("code",[e._v("指定")]),e._v("位置从"),r("code",[e._v("后")]),e._v("向"),r("code",[e._v("前")]),e._v("搜索")])]),e._v(" "),r("ul",[r("li",[r("p",[e._v("lastIndexOf() 方法对大小写敏感！")])]),e._v(" "),r("li",[r("p",[e._v("如果要检索的字符串值没有出现，则该方法返回 -1。\n"),r("strong",[e._v("不带参数：")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('var str="Hello world! Hello Today"\nconsole.log(str.lastIndexOf("Hello"))  // 13\nconsole.log(str.lastIndexOf("World"))  //-1\nconsole.log(str.lastIndexOf("world"))  //6\n')])])]),r("p",[r("strong",[e._v("带参数：")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('var str="0123456789501234";\nvar n=str.lastIndexOf("12", 10);   // 1  从下标为10的位置，开始往前找第一个\'12\'出现的下标\nvar n=str.lastIndexOf("12", 15);   // 12  从下标为15的位置，开始往前找第一个\'12\'出现的下标\nvar n=str.lastIndexOf("778", 15);   // -1  未找到\n')])])]),r("h3",{attrs:{id:"_1-8-push和pop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-push和pop"}},[e._v("#")]),e._v(" 1-8. push和pop")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("push 把里面的内容添加到数组"),r("code",[e._v("末尾")]),e._v("，并返回修改后的"),r("code",[e._v("长度")]),e._v("。")])]),e._v(" "),r("li",[r("p",[e._v("pop 移除数组"),r("code",[e._v("最后")]),e._v("一项，返回"),r("code",[e._v("移除")]),e._v("的那个值，减少数组的length。")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('//push\nvar arr1 = ["a","b","c"];\nvar arr2 = arr1.push("e","f");\nconsole.log(arr1); 　　　　　// ["a", "b", "c", "e", "f"]　　（修改原数组）\nconsole.log(arr2);          // 5   (返回的是长度)\n\n//pop　　　　　　　\nvar arr3 = arr1.pop();\nconsole.log(arr1); 　　//  ["a", "b", "c", "e"]　　（修改原数组）　　　　　\nconsole.log(arr3); 　　// 　f  （返回移除的那个值）　　　　　　　\n')])])]),r("h3",{attrs:{id:"_1-9-unshift-和-shift"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-unshift-和-shift"}},[e._v("#")]),e._v(" 1-9. unshift 和 shift")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("unshift 将参数添加到原数组"),r("code",[e._v("开头")]),e._v("，并返回数组的"),r("code",[e._v("长度")]),e._v(" 。")])]),e._v(" "),r("li",[r("p",[e._v("shift 删除原数组"),r("code",[e._v("第一项")]),e._v("，并返回"),r("code",[e._v("删除元素")]),e._v("的值；如果数组为空则返回undefined 。")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('//unshift\nvar arr1 = ["a","b","c"];\nvar arr2 = arr1.unshift("e","f");\nconsole.log(arr1); 　　　　　//  ["e", "f", "a", "b", "c"]　　（修改原数组）\nconsole.log(arr2);          // 5   (返回的是长度)\n\n//shift\nvar arr3 = arr1.shift();\nconsole.log(arr1); 　　//   ["f", "a", "b", "c"]　　（修改原数组）　　　　　\nconsole.log(arr3); 　　// 　e  （返回移除的那个值）　　　　　　　\n')])])]),r("h3",{attrs:{id:"_1-10-sort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-sort"}},[e._v("#")]),e._v(" 1-10. sort")]),e._v(" "),r("blockquote",[r("p",[e._v("将数组里的项从小到大排序,默认排序顺序是根据"),r("code",[e._v("字符串UniCode码")]),e._v("。 arr.sort( )")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('var arr1 = ["b", "a", "c", "b"];\nvar arr2 = ["2", "2", "1", "4"];\nvar arr3 = [2, 2, 1, 4];\nvar arr4 = [\'12\', \'232\', \'500\', \'1000\'];\nconsole.log(arr1.sort()); 　　　　// ["a", "b", "b", "c"]　　　　　　\nconsole.log(arr2.sort()); 　　　　// ["1", "2", "2", "4"]　　　　　\nconsole.log(arr3.sort()); 　　　　// ["1000", "12", "232", "500"]　　排序不符合预期，所以要用到函数排序　　\n　　　　　　　　\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function sortNumber(a,b)\n{\n　　return a - b\n}\narr = [13, 24, 51, 3]; \nconsole.log(arr.sort()); 　　　　　　　　　　// [13, 24, 3, 51] \nconsole.log(arr.sort(sortNumber)); 　　　　// [3, 13, 24, 51](数组被改变)\n")])])]),r("h3",{attrs:{id:"_1-11-reverse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-reverse"}},[e._v("#")]),e._v(" 1-11.reverse()")]),e._v(" "),r("blockquote",[r("p",[e._v("反转数组项的顺序  arr.reverse( )")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var arr = [13, 24, 51, 3];\nconsole.log(arr.reverse()); 　　　　　　　　//[3, 51, 24, 13]\nconsole.log(arr); 　　　　　　　　　　　　　 //[3, 51, 24, 13](原数组改变)\n")])])]),r("h3",{attrs:{id:"_1-12-slice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-slice"}},[e._v("#")]),e._v(" 1-12. slice")]),e._v(" "),r("blockquote",[r("p",[e._v("返回从"),r("code",[e._v("原数组")]),e._v("中指定"),r("code",[e._v("开始下标")]),e._v("到"),r("code",[e._v("结束下标")]),e._v("之间的项组成的"),r("code",[e._v("新数组")]),e._v("。")])]),e._v(" "),r("p",[e._v("slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("在只有一个参数的情况下， slice()方法返回从该参数指定位置"),r("code",[e._v("开始")]),e._v("到当前"),r("code",[e._v("数组末尾")]),e._v("的所有项。")])]),e._v(" "),r("li",[r("p",[e._v("如果有两个参数，该方法返回"),r("code",[e._v("起始")]),e._v("和"),r("code",[e._v("结束")]),e._v("位置之间的项——但"),r("code",[e._v("不包括结束")]),e._v("位置的项。")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var arr = [1,3,5,7,9,11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1,4);\nvar arrCopy3 = arr.slice(1,-2);\nvar arrCopy4 = arr.slice(-4,-1);\nconsole.log(arr); 　　　　　　　　　　　　　  //  [1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy); 　　　　　　　　　　　 //  [3, 5, 7, 9, 11]  (返回下标 1 到 最后 的位置)\nconsole.log(arrCopy2); 　　　　　　　　　　　//  [3, 5, 7]\nconsole.log(arrCopy3); 　　　　　　　　　　　//  [3, 5, 7]\nconsole.log(arrCopy4); 　　　　　　　　　　　//  [5, 7, 9]\n")])])]),r("ul",[r("li",[r("p",[e._v("arrCopy只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。")])]),e._v(" "),r("li",[r("p",[e._v("arrCopy2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。")])]),e._v(" "),r("li",[r("p",[e._v("arrCopy3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。")])]),e._v(" "),r("li",[r("p",[e._v("arrCopy4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。")])])]),e._v(" "),r("h3",{attrs:{id:"_1-13-splice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-splice"}},[e._v("#")]),e._v(" 1-13. splice")]),e._v(" "),r("blockquote",[r("p",[e._v("删除、插入和替换。  "),r("strong",[e._v("修改原数组")])])]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("删除：")]),e._v("指定 2 个参数：要删除的"),r("code",[e._v("第一项")]),e._v("的位置和要删除的"),r("code",[e._v("项数")]),e._v("。书写格式："),r("code",[e._v("arr.splice( 1 , 3 )")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("插入：")]),e._v("可以向指定位置插入任意数量的项，只需提供 3 个参数："),r("code",[e._v("起始位置")]),e._v("、 "),r("code",[e._v("0（要删除的项数）")]),e._v("和要"),r("code",[e._v("插入的项")]),e._v("。书写格式："),r("code",[e._v("arr.splice( 2,0,4,6 )")])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("替换：")]),e._v("可以向指定位置插入任意数量的项，且同时"),r("code",[e._v("删除")]),e._v("任意数量的项，只需指定 3 个参数："),r("code",[e._v("起始位置")]),e._v("、要"),r("code",[e._v("删除的项数")]),e._v("和要"),r("code",[e._v("插入")]),e._v("的任意数量的项。插入的项数不必与删除的项数相等。")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var arr = [1,3,5,7,9,11];\nvar arrRemoved = arr.splice(0,2);\nconsole.log(arr); 　　　　　　　　　　　　　　　//[5, 7, 9, 11] (修改原数组， 从0开始删除2项)\nconsole.log(arrRemoved); 　　　　　　　　　　　//[1, 3]   (返回删除后的数组)\nvar arrRemoved2 = arr.splice(2,0,4,6);\nconsole.log(arr); 　　　　　　　　　　　　　　　// [5, 7, 4, 6, 9, 11] (修改原数组， 从下标位置2前插入4,6)\nconsole.log(arrRemoved2); 　　　　　　　　　　// [] (插入不返回)\nvar arrRemoved3 = arr.splice(1,1,2,4);\nconsole.log(arr); 　　　　　　　　　　　　　　　// [5, 2, 4, 4, 6, 9, 11] (从下标1的位置开始删除，删除一项，并插入2,4)\nconsole.log(arrRemoved3); 　　　　　　　　　　//[7] (返回删除项)\n")])])]),r("h3",{attrs:{id:"_1-14-map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-map"}},[e._v("#")]),e._v(" 1-14. map")]),e._v(" "),r("blockquote",[r("p",[e._v("指“映射”，对数组中的每一项"),r("code",[e._v("运行给定")]),e._v("的"),r("code",[e._v("函数")]),e._v("，返回每次函数调用的"),r("code",[e._v("结果")]),e._v("组成的"),r("code",[e._v("数组")]),e._v("。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 下面代码利用map方法实现数组中每个数求平方。\nvar arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\n    return item*item;\n});\nconsole.log(arr2); // [1, 4, 9, 16, 25]\nconsole.log(arr); //  [1, 2, 3, 4, 5] 不改变远数组\n")])])]),r("h3",{attrs:{id:"_1-15-some"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-some"}},[e._v("#")]),e._v(" 1-15. some")]),e._v(" "),r("blockquote",[r("p",[e._v("判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n    return x < 3;\n}); \nconsole.log(arr2); //true\nvar arr3 = arr.some(function(x) {\n    return x < 1;\n}); \nconsole.log(arr3); // false\n")])])]),r("h3",{attrs:{id:"_1-16-reduce和reduceright"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-reduce和reduceright"}},[e._v("#")]),e._v(" 1-16. reduce和reduceRight")]),e._v(" "),r("blockquote",[r("p",[e._v("reduce从数组的第一项开始，逐个遍历到最后\nreduceRight数组的最后一项开始，向前遍历到第一项")])]),e._v(" "),r("p",[r("strong",[e._v("4 个参数")]),e._v("：")]),e._v(" "),r("ul",[r("li",[e._v("前一个值")]),e._v(" "),r("li",[e._v("当前值")]),e._v(" "),r("li",[e._v("项的索引")]),e._v(" "),r("li",[e._v("数组对象。")])]),e._v(" "),r("p",[e._v("这个函数返回的任何值都会作"),r("code",[e._v("为第一个参数")]),e._v("自动传给"),r("code",[e._v("下一项")]),e._v("。")]),e._v(" "),r("p",[e._v("reduce")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// reduce实现数组求和，数组一开始加了一个初始值10。\n// 也就是一开始prev：10,cur：1,index：0,array：[1,2,3,4,5]\nvar values = [1,2,3,4,5];\nvar sum = values.reduce(function(prev, cur, index, array){\n    return prev + cur;\n},10);\nconsole.log(sum); //25\n")])])]),r("p",[e._v("reduceRight")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// reduceRight()实现数组求和，数组一开始加了一个初始值10。\n// 也就是一开始prev：10,cur：5,index：4,array：[1,2,3,4,5]\nvar values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\n    return prev + cur;\n},10);\nconsole.log(sum); //25\n")])])]),r("h2",{attrs:{id:"_2-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象"}},[e._v("#")]),e._v(" 2. 对象")]),e._v(" "),r("blockquote",[r("p",[e._v("JS对象是属性变量的容器")])]),e._v(" "),r("h3",{attrs:{id:"_2-1-object-assign"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-object-assign"}},[e._v("#")]),e._v(" 2-1. Object.assign()")]),e._v(" "),r("blockquote",[r("p",[e._v("将所有可枚举属性的值从一个或多个"),r("code",[e._v("源对象")]),e._v("复制到"),r("code",[e._v("目标对象")]),e._v("。它将返回"),r("code",[e._v("目标对象")]),e._v("。连接两个或更多的数组，并返回结果。将"),r("code",[e._v("()里后面")]),e._v("的元素,拼接到"),r("code",[e._v("()里前面")]),e._v("的数组中")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("let target = { a: 1, b: 2 };\nlet source = { b: 4, c: 5 };\nlet Target = Object.assign(target, source);\nconsole.log(target);  // {a: 1, b: 4, c: 5}   目标对象修改，相同属性以源对象为准\nconsole.log(source);  // { b: 4, c: 5 }       源对象不会修改\nconsole.log(Target);   //{a: 1, b: 4, c: 5}   返回目标对象\n\n")])])]),r("h3",{attrs:{id:"_2-2-object-create"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-object-create"}},[e._v("#")]),e._v(" 2-2. Object.create()")]),e._v(" "),r("blockquote",[r("p",[e._v("创建一个新对象，使用"),r("code",[e._v("现有")]),e._v("的对象来提供"),r("code",[e._v("新")]),e._v("创建的对象的"),r("code",[e._v("__proto__")]),e._v("。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('const person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n \nconst me = Object.create(person); \nconsole.log(me)  // {} 该对象的原型含有person的属性和方法\nconsole.log(me.name, me.isHuman, me.printIntroduction)  //undefined false  fn()\n\n \nme.name = "Matthew";    // name 在me中存在，但是不会加到person中\nme.isHuman = true;      // me的isHuman会被重置\n \nme.printIntroduction(); //My name is Matthew. Am I human? true\nconsole.log(me)         // {name: "Matthew", isHuman: true} \nconsole.log(person)    //{isHuman: false, printIntroduction: ƒ}\n')])])]),r("h3",{attrs:{id:"_2-3-object-defineproperties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-object-defineproperties"}},[e._v("#")]),e._v(" 2-3. Object.defineProperties()")]),e._v(" "),r("blockquote",[r("p",[e._v("直接在一个对象上定义"),r("code",[e._v("新的属性")]),e._v("或修改"),r("code",[e._v("现有属性")]),e._v("，并返回该对象。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var obj = {};\nObject.defineProperties(obj, {\n  'property1': {\n    value: true,\n    writable: true\n  },\n  'property2': {\n    value: 'Hello',\n    writable: false\n  }\n})\n\n\nobj\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);